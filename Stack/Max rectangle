//Geeksforgeeks
class Solution {
    public int MAH(int arr[] ){
        int n = arr.length;
        Stack<Integer> st = new Stack<>();
        int NSEL [] = new int [n];
        int NSER [] = new int [n];
        
        for(int i = 0 ; i < n ; i++){
            while(st.size() > 0 && arr[i] <= arr[st.peek()]){
                st.pop();
            }
            NSEL[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }
        while(st.size() > 0) st.pop();
        
        for(int i = n - 1 ; i >= 0 ; i--){
            while(st.size() > 0 && arr[i] <= arr[st.peek()]){
                st.pop();
            }
            NSER[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }
        int maxArea = 0;
        for(int i = 0 ; i < n ; i++){
            maxArea = Math.max(maxArea , arr[i] * (NSER[i] - NSEL[i] - 1));
        }
        return maxArea;
    }
    public int maxArea(int M[][], int n, int m) {
        // add code here.
        int height [] = new int [m];
        for(int i = 0 ; i < m ; i++){
            if(M[0][i] == 1) height[i] = 1;
        }
        int maxAreaRectangle = MAH(height);
        
        for(int i = 1 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(M [i][j] == 0 ){
                    height[j] = 0;
                }
                else{
                    height[j] += 1;
                }
            }
            maxAreaRectangle = Math.max(maxAreaRectangle , MAH(height));
        }
        return maxAreaRectangle;
        
    }
}

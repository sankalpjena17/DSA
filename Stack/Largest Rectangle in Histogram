//Leetcode
class Solution {
    public int largestRectangleArea(int[] hist) {
        int n = hist.length;
         Stack<Integer> st = new Stack<>();
        int [] NSEL = new int [n];
        int [] NSER = new int [n];
        
        for(int i = 0 ; i < n ; i++){
            while(st.size() > 0 && hist[i] <= hist[st.peek()]){
                st.pop();
            }
            NSEL[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }
        while(st.size() > 0){
            st.pop();
        }
        for(int i =(n-1) ; i >= 0 ; i--){
            while(st.size() > 0 && hist[i] <= hist[st.peek()]){
                st.pop();
            }
            NSER[i] = st.isEmpty() ?  n : st.peek();
            st.push(i); 
        }
        int maxArea = 0;
        for(int i = 0 ; i < n ; i++){
            maxArea = Math.max(maxArea , hist[i] * (NSER[i] - NSEL[i] - 1));
        }
        return maxArea;
        
    }
}

public class Solution {
    public int findMedian(int[][] A) {
        
        int n = A.length;
        int m = A[0].length;
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        
        //Find mid and max value
        for(int i = 0 ; i < n ; i++){
            min = Math.min(min , A[i][0]);
            max = Math.max(max , A[i][m-1]);
        }
        
        //Perform binary search to find the median 
        int desired = (n * m + 1) / 2;
        while(min < max) {
            int mid = min + (max - min ) / 2;
            int count = 0;
            int place = 0;
            
            for(int i = 0 ; i < n ; i++){
                count = CountSmaller(A[i] , mid);
                place += count;
            }
            if(place < desired){
                min = mid + 1;
            }
            else{
                max = mid;
            }
        }
        return min;
    }
    
    //Count the number of element that are smalle from x
    private int CountSmaller (int[] A , int x){
        int low = 0;
        int high = A.length;
        
        while(low < high) {
            int mid = low + (high - low) / 2;
            if(A[mid] <= x){
                low = mid + 1;
            }
            else{
                high = mid;
            }
        }
        return low;
    }
}

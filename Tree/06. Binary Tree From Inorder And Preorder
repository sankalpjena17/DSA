


//  Approach:-
//         The problem is simple that as we know in preorder root is the first element so , 
//         we search the first element in the inorder list and devide the list according to that 
//         but the deviding left and right part is tricky we need to draw the intuation so that we can
//         know the left and right node.
//         And here we are using hashmap so that it can find the root in inorder list in constant time 
//         complexity 

class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length  != inorder.length){
            return null;
        }
        Map<Integer, Integer> indexMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            indexMap.put(inorder[i], i);
        }

        return BuildTree(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1, indexMap);
    }

    private TreeNode BuildTree(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, Map<Integer, Integer> indexMap) {
        if (preStart > preEnd || inStart > inEnd)
            return null;

        int rootValue = preorder[preStart];
        TreeNode root = new TreeNode(rootValue);

        int rootIndexInorder = indexMap.get(rootValue);
        int leftSubtreeSize = rootIndexInorder - inStart;

        root.left = BuildTree(preorder, preStart + 1, preStart + leftSubtreeSize, inorder, inStart, rootIndexInorder - 1, indexMap);
        root.right = BuildTree(preorder, preStart + leftSubtreeSize + 1, preEnd, inorder, rootIndexInorder + 1, inEnd, indexMap);

        return root;
    }
}

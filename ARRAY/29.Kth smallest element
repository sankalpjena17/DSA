
//Method:1
class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) 
    { 
        //Your code here
        quicksort(arr , l , r);
        return arr[k-1];
    } 
    public static int partition(int [] arr , int l , int r){
        int pi = arr[r];
        int i = l - 1;
        
        for(int j = l ; j <= r ; j++){
            if(arr[j] < pi){
                i++;
                swap(arr , i , j );
            }
        }
        
        swap(arr , i + 1 , r);
        return i+1;
    }
    
    static void quicksort(int arr[] , int l , int r){
        if(l < r ){
            int pivot = partition(arr , l , r);
            
            quicksort(arr,l,pivot-1);
            quicksort(arr , pivot + 1 , r);
        }
    }
    
    public static void swap(int [] arr , int i , int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Method:2


//User function Template for Java

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) 
    { 
        //Your code here
        Queue<Integer> minHeap = new PriorityQueue<>();
       
       for(int x : arr)
       {
           minHeap.add(x);
       }
       
       for(int j=0;j<k-1;j++)
       {
           minHeap.remove();
       }
       
       return minHeap.peek();
    } 
}

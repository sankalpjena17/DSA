
class Solution
{
    public int[][] overlappedInterval(int[][] intervals)
    {
        // Code here // Code here
        // startpoint1 = start element of 1st pair 

        // endpoint1 = end element of 1st pair

        // startpoint2 = start element of 2nd pair

        // endpoint2 = end element of 2nd pair

        

        //sorting the given input

        Arrays.sort(intervals,(a,b)->Integer.compare(a[0],b[0]));

        

        // forming a stack and adding the first index into the stack

        Stack<int[]> stack=new Stack<>();

        stack.add(intervals[0]);

        

        for(int i=1;i<intervals.length;i++){

            

            // start and end element for interval2

            int startpoint2=intervals[i][0];

            int endpoint2=intervals[i][1];

            

            int[] poparray=stack.pop();

            

            // start and end element for interval1;

            int startpoint1=poparray[0];

            int endpoint1=poparray[1];

            

            //comparing

            if(endpoint1>=startpoint2){

                int endmax=Math.max(endpoint1,endpoint2);

                //merge

                int[] merge=new int[]{startpoint1,endmax};

                stack.add(merge);

            }

            

            else{

            //   if it doesnot merge then we poped the wrond interval

            // so we need to add it again back to stack

            stack.add(poparray);

            stack.add(intervals[i]);  //need to add the merged interval too

            }

        }


        // coloum are just 2 and row is equal to stacksize

        // everything was in stack till now so for the output

        int [][] output=new int[stack.size()][2];

        for(int i=output.length-1;i>=0;i--){

            

            int[] poparray=stack.pop();

            output[i][0]=poparray[0];  //start

            output[i][1]=poparray[1];  //end

        }

        return output;
    }
}

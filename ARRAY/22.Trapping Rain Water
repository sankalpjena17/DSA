
//Leetcode
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int sum = 0;
        int [] maxL = new int [n];
        int [] maxR = new int [n];
        int [] width = new int [n];

        maxL[0] = height[0];
        for(int i = 1 ; i < n ; i++){
            maxL[i] = Math.max(height[i] , maxL[i-1]);
        }

        maxR[n-1] = height[n-1];
        for(int i = n - 2 ; i >= 0 ; i--){
            maxR[i] = Math.max(height[i] , maxR[i+1]);
        }

        for(int i = 0 ;i < n ; i++){
            width[i] = Math.min(maxL[i] , maxR[i]) - height[i];
        }

        for(int i = 0 ; i < n ; i++){
            sum = sum + width[i];
        }
        return sum;
    }

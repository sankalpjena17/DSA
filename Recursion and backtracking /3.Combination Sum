class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
         
        List<List<Integer>> result  = new ArrayList<>();
        backtrack(result , new ArrayList<>() , target , candidates , 0);
        return result;
    }
    private void backtrack (List<List<Integer>>result , List<Integer> temp , int target , int []candidates , int start) {
       if(target < 0) return;
       if(target == 0) {
           result.add(new ArrayList<>(temp));
           return;
       }
        for(int i = start ; i < candidates.length ; i++){
            temp.add(candidates[i]);
            backtrack(result , temp , target - candidates[i] , candidates , i );
            temp.remove(temp.size() - 1);
        }

    }
}

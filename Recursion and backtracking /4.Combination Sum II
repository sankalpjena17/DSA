
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {

        Arrays.sort(candidates); // sort the candidates array
        List<List<Integer>> res = new ArrayList<>(); // list to store results
        backtrack(res, new ArrayList<>(), candidates, target, 0);
        return res;
    }
    
    private void backtrack(List<List<Integer>> res, List<Integer> tempList, int[] candidates, int remain, int start) {
        if (remain < 0) { // if the target is exceeded, stop
            return;
        } else if (remain == 0) { // if target is reached, add tempList to results list
            res.add(new ArrayList<>(tempList));
        } else {
            for (int i = start; i < candidates.length; i++) {
                if (i > start && candidates[i] == candidates[i-1]) { // skip duplicates
                    continue;
                }
                tempList.add(candidates[i]); // add candidate to tempList
                backtrack(res, tempList, candidates, remain-candidates[i], i+1); // recurse with remaining target
                tempList.remove(tempList.size()-1); // remove last element (backtrack)
            }
        }
    }

}













